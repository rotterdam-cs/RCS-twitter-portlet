/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rcs.dbservice.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rcs.dbservice.model.TwitterSettings;
import com.rcs.dbservice.model.TwitterSettingsModel;
import com.rcs.dbservice.model.TwitterSettingsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TwitterSettings service. Represents a row in the &quot;twitter_TwitterSettings&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rcs.dbservice.model.TwitterSettingsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TwitterSettingsImpl}.
 * </p>
 *
 * @author rcs
 * @see TwitterSettingsImpl
 * @see com.rcs.dbservice.model.TwitterSettings
 * @see com.rcs.dbservice.model.TwitterSettingsModel
 * @generated
 */
@JSON(strict = true)
public class TwitterSettingsModelImpl extends BaseModelImpl<TwitterSettings>
	implements TwitterSettingsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a twitter settings model instance should use the {@link com.rcs.dbservice.model.TwitterSettings} interface instead.
	 */
	public static final String TABLE_NAME = "twitter_TwitterSettings";
	public static final Object[][] TABLE_COLUMNS = {
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "applicationName", Types.VARCHAR },
			{ "consumerKey", Types.VARCHAR },
			{ "consumerKeySecret", Types.VARCHAR },
			{ "accessToken", Types.VARCHAR },
			{ "accessTokenSecret", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table twitter_TwitterSettings (groupId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,applicationName VARCHAR(75) null,consumerKey VARCHAR(75) null,consumerKeySecret VARCHAR(75) null,accessToken VARCHAR(75) null,accessTokenSecret VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table twitter_TwitterSettings";
	public static final String ORDER_BY_JPQL = " ORDER BY twitterSettings.groupId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY twitter_TwitterSettings.groupId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rcs.dbservice.model.TwitterSettings"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rcs.dbservice.model.TwitterSettings"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rcs.dbservice.model.TwitterSettings"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TwitterSettings toModel(TwitterSettingsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TwitterSettings model = new TwitterSettingsImpl();

		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setApplicationName(soapModel.getApplicationName());
		model.setConsumerKey(soapModel.getConsumerKey());
		model.setConsumerKeySecret(soapModel.getConsumerKeySecret());
		model.setAccessToken(soapModel.getAccessToken());
		model.setAccessTokenSecret(soapModel.getAccessTokenSecret());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TwitterSettings> toModels(
		TwitterSettingsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TwitterSettings> models = new ArrayList<TwitterSettings>(soapModels.length);

		for (TwitterSettingsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rcs.dbservice.model.TwitterSettings"));

	public TwitterSettingsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _groupId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGroupId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _groupId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TwitterSettings.class;
	}

	@Override
	public String getModelClassName() {
		return TwitterSettings.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("applicationName", getApplicationName());
		attributes.put("consumerKey", getConsumerKey());
		attributes.put("consumerKeySecret", getConsumerKeySecret());
		attributes.put("accessToken", getAccessToken());
		attributes.put("accessTokenSecret", getAccessTokenSecret());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String applicationName = (String)attributes.get("applicationName");

		if (applicationName != null) {
			setApplicationName(applicationName);
		}

		String consumerKey = (String)attributes.get("consumerKey");

		if (consumerKey != null) {
			setConsumerKey(consumerKey);
		}

		String consumerKeySecret = (String)attributes.get("consumerKeySecret");

		if (consumerKeySecret != null) {
			setConsumerKeySecret(consumerKeySecret);
		}

		String accessToken = (String)attributes.get("accessToken");

		if (accessToken != null) {
			setAccessToken(accessToken);
		}

		String accessTokenSecret = (String)attributes.get("accessTokenSecret");

		if (accessTokenSecret != null) {
			setAccessTokenSecret(accessTokenSecret);
		}
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getApplicationName() {
		if (_applicationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicationName;
		}
	}

	@Override
	public void setApplicationName(String applicationName) {
		_applicationName = applicationName;
	}

	@JSON
	@Override
	public String getConsumerKey() {
		if (_consumerKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _consumerKey;
		}
	}

	@Override
	public void setConsumerKey(String consumerKey) {
		_consumerKey = consumerKey;
	}

	@JSON
	@Override
	public String getConsumerKeySecret() {
		if (_consumerKeySecret == null) {
			return StringPool.BLANK;
		}
		else {
			return _consumerKeySecret;
		}
	}

	@Override
	public void setConsumerKeySecret(String consumerKeySecret) {
		_consumerKeySecret = consumerKeySecret;
	}

	@JSON
	@Override
	public String getAccessToken() {
		if (_accessToken == null) {
			return StringPool.BLANK;
		}
		else {
			return _accessToken;
		}
	}

	@Override
	public void setAccessToken(String accessToken) {
		_accessToken = accessToken;
	}

	@JSON
	@Override
	public String getAccessTokenSecret() {
		if (_accessTokenSecret == null) {
			return StringPool.BLANK;
		}
		else {
			return _accessTokenSecret;
		}
	}

	@Override
	public void setAccessTokenSecret(String accessTokenSecret) {
		_accessTokenSecret = accessTokenSecret;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TwitterSettings.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TwitterSettings toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TwitterSettings)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TwitterSettingsImpl twitterSettingsImpl = new TwitterSettingsImpl();

		twitterSettingsImpl.setGroupId(getGroupId());
		twitterSettingsImpl.setCompanyId(getCompanyId());
		twitterSettingsImpl.setUserId(getUserId());
		twitterSettingsImpl.setUserName(getUserName());
		twitterSettingsImpl.setCreateDate(getCreateDate());
		twitterSettingsImpl.setModifiedDate(getModifiedDate());
		twitterSettingsImpl.setApplicationName(getApplicationName());
		twitterSettingsImpl.setConsumerKey(getConsumerKey());
		twitterSettingsImpl.setConsumerKeySecret(getConsumerKeySecret());
		twitterSettingsImpl.setAccessToken(getAccessToken());
		twitterSettingsImpl.setAccessTokenSecret(getAccessTokenSecret());

		twitterSettingsImpl.resetOriginalValues();

		return twitterSettingsImpl;
	}

	@Override
	public int compareTo(TwitterSettings twitterSettings) {
		long primaryKey = twitterSettings.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TwitterSettings)) {
			return false;
		}

		TwitterSettings twitterSettings = (TwitterSettings)obj;

		long primaryKey = twitterSettings.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TwitterSettingsModelImpl twitterSettingsModelImpl = this;

		twitterSettingsModelImpl._originalGroupId = twitterSettingsModelImpl._groupId;

		twitterSettingsModelImpl._setOriginalGroupId = false;

		twitterSettingsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TwitterSettings> toCacheModel() {
		TwitterSettingsCacheModel twitterSettingsCacheModel = new TwitterSettingsCacheModel();

		twitterSettingsCacheModel.groupId = getGroupId();

		twitterSettingsCacheModel.companyId = getCompanyId();

		twitterSettingsCacheModel.userId = getUserId();

		twitterSettingsCacheModel.userName = getUserName();

		String userName = twitterSettingsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			twitterSettingsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			twitterSettingsCacheModel.createDate = createDate.getTime();
		}
		else {
			twitterSettingsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			twitterSettingsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			twitterSettingsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		twitterSettingsCacheModel.applicationName = getApplicationName();

		String applicationName = twitterSettingsCacheModel.applicationName;

		if ((applicationName != null) && (applicationName.length() == 0)) {
			twitterSettingsCacheModel.applicationName = null;
		}

		twitterSettingsCacheModel.consumerKey = getConsumerKey();

		String consumerKey = twitterSettingsCacheModel.consumerKey;

		if ((consumerKey != null) && (consumerKey.length() == 0)) {
			twitterSettingsCacheModel.consumerKey = null;
		}

		twitterSettingsCacheModel.consumerKeySecret = getConsumerKeySecret();

		String consumerKeySecret = twitterSettingsCacheModel.consumerKeySecret;

		if ((consumerKeySecret != null) && (consumerKeySecret.length() == 0)) {
			twitterSettingsCacheModel.consumerKeySecret = null;
		}

		twitterSettingsCacheModel.accessToken = getAccessToken();

		String accessToken = twitterSettingsCacheModel.accessToken;

		if ((accessToken != null) && (accessToken.length() == 0)) {
			twitterSettingsCacheModel.accessToken = null;
		}

		twitterSettingsCacheModel.accessTokenSecret = getAccessTokenSecret();

		String accessTokenSecret = twitterSettingsCacheModel.accessTokenSecret;

		if ((accessTokenSecret != null) && (accessTokenSecret.length() == 0)) {
			twitterSettingsCacheModel.accessTokenSecret = null;
		}

		return twitterSettingsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", applicationName=");
		sb.append(getApplicationName());
		sb.append(", consumerKey=");
		sb.append(getConsumerKey());
		sb.append(", consumerKeySecret=");
		sb.append(getConsumerKeySecret());
		sb.append(", accessToken=");
		sb.append(getAccessToken());
		sb.append(", accessTokenSecret=");
		sb.append(getAccessTokenSecret());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.rcs.dbservice.model.TwitterSettings");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationName</column-name><column-value><![CDATA[");
		sb.append(getApplicationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>consumerKey</column-name><column-value><![CDATA[");
		sb.append(getConsumerKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>consumerKeySecret</column-name><column-value><![CDATA[");
		sb.append(getConsumerKeySecret());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessToken</column-name><column-value><![CDATA[");
		sb.append(getAccessToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessTokenSecret</column-name><column-value><![CDATA[");
		sb.append(getAccessTokenSecret());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TwitterSettings.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TwitterSettings.class
		};
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _applicationName;
	private String _consumerKey;
	private String _consumerKeySecret;
	private String _accessToken;
	private String _accessTokenSecret;
	private long _columnBitmask;
	private TwitterSettings _escapedModel;
}