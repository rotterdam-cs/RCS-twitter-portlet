/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rcs.dbservice.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import com.rcs.dbservice.service.persistence.TweetPK;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the Tweet service. Represents a row in the &quot;twitter_Tweet&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.rcs.dbservice.model.impl.TweetModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.rcs.dbservice.model.impl.TweetImpl}.
 * </p>
 *
 * @author rcs
 * @see Tweet
 * @see com.rcs.dbservice.model.impl.TweetImpl
 * @see com.rcs.dbservice.model.impl.TweetModelImpl
 * @generated
 */
public interface TweetModel extends BaseModel<Tweet> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a tweet model instance should use the {@link Tweet} interface instead.
	 */

	/**
	 * Returns the primary key of this tweet.
	 *
	 * @return the primary key of this tweet
	 */
	public TweetPK getPrimaryKey();

	/**
	 * Sets the primary key of this tweet.
	 *
	 * @param primaryKey the primary key of this tweet
	 */
	public void setPrimaryKey(TweetPK primaryKey);

	/**
	 * Returns the group ID of this tweet.
	 *
	 * @return the group ID of this tweet
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this tweet.
	 *
	 * @param groupId the group ID of this tweet
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this tweet.
	 *
	 * @return the company ID of this tweet
	 */
	public long getCompanyId();

	/**
	 * Sets the company ID of this tweet.
	 *
	 * @param companyId the company ID of this tweet
	 */
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this tweet.
	 *
	 * @return the user ID of this tweet
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this tweet.
	 *
	 * @param userId the user ID of this tweet
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this tweet.
	 *
	 * @return the user uuid of this tweet
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this tweet.
	 *
	 * @param userUuid the user uuid of this tweet
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this tweet.
	 *
	 * @return the user name of this tweet
	 */
	@AutoEscape
	public String getUserName();

	/**
	 * Sets the user name of this tweet.
	 *
	 * @param userName the user name of this tweet
	 */
	public void setUserName(String userName);

	/**
	 * Returns the create date of this tweet.
	 *
	 * @return the create date of this tweet
	 */
	public Date getCreateDate();

	/**
	 * Sets the create date of this tweet.
	 *
	 * @param createDate the create date of this tweet
	 */
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this tweet.
	 *
	 * @return the modified date of this tweet
	 */
	public boolean getModifiedDate();

	/**
	 * Returns <code>true</code> if this tweet is modified date.
	 *
	 * @return <code>true</code> if this tweet is modified date; <code>false</code> otherwise
	 */
	public boolean isModifiedDate();

	/**
	 * Sets whether this tweet is modified date.
	 *
	 * @param modifiedDate the modified date of this tweet
	 */
	public void setModifiedDate(boolean modifiedDate);

	/**
	 * Returns the removed of this tweet.
	 *
	 * @return the removed of this tweet
	 */
	public boolean getRemoved();

	/**
	 * Returns <code>true</code> if this tweet is removed.
	 *
	 * @return <code>true</code> if this tweet is removed; <code>false</code> otherwise
	 */
	public boolean isRemoved();

	/**
	 * Sets whether this tweet is removed.
	 *
	 * @param removed the removed of this tweet
	 */
	public void setRemoved(boolean removed);

	/**
	 * Returns the tweet ID of this tweet.
	 *
	 * @return the tweet ID of this tweet
	 */
	public long getTweetId();

	/**
	 * Sets the tweet ID of this tweet.
	 *
	 * @param tweetId the tweet ID of this tweet
	 */
	public void setTweetId(long tweetId);

	/**
	 * Returns the tweet ID str of this tweet.
	 *
	 * @return the tweet ID str of this tweet
	 */
	@AutoEscape
	public String getTweetIdStr();

	/**
	 * Sets the tweet ID str of this tweet.
	 *
	 * @param tweetIdStr the tweet ID str of this tweet
	 */
	public void setTweetIdStr(String tweetIdStr);

	/**
	 * Returns the tweet created at of this tweet.
	 *
	 * @return the tweet created at of this tweet
	 */
	public Date getTweetCreatedAt();

	/**
	 * Sets the tweet created at of this tweet.
	 *
	 * @param tweetCreatedAt the tweet created at of this tweet
	 */
	public void setTweetCreatedAt(Date tweetCreatedAt);

	/**
	 * Returns the tweet retweeted of this tweet.
	 *
	 * @return the tweet retweeted of this tweet
	 */
	public boolean getTweetRetweeted();

	/**
	 * Returns <code>true</code> if this tweet is tweet retweeted.
	 *
	 * @return <code>true</code> if this tweet is tweet retweeted; <code>false</code> otherwise
	 */
	public boolean isTweetRetweeted();

	/**
	 * Sets whether this tweet is tweet retweeted.
	 *
	 * @param tweetRetweeted the tweet retweeted of this tweet
	 */
	public void setTweetRetweeted(boolean tweetRetweeted);

	/**
	 * Returns the tweet retweet count of this tweet.
	 *
	 * @return the tweet retweet count of this tweet
	 */
	public int getTweetRetweetCount();

	/**
	 * Sets the tweet retweet count of this tweet.
	 *
	 * @param tweetRetweetCount the tweet retweet count of this tweet
	 */
	public void setTweetRetweetCount(int tweetRetweetCount);

	/**
	 * Returns the tweet text of this tweet.
	 *
	 * @return the tweet text of this tweet
	 */
	@AutoEscape
	public String getTweetText();

	/**
	 * Sets the tweet text of this tweet.
	 *
	 * @param tweetText the tweet text of this tweet
	 */
	public void setTweetText(String tweetText);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(Tweet tweet);

	@Override
	public int hashCode();

	@Override
	public CacheModel<Tweet> toCacheModel();

	@Override
	public Tweet toEscapedModel();

	@Override
	public Tweet toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}